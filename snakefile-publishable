#==============================================================================
# Snakefile for [cool method name].
# 2025
#==============================================================================

#==============================================================================
# Imports
#==============================================================================
import os

#==============================================================================
# User settings 
#==============================================================================
BASEDIR = os.getcwd()
print("We are operating out of base directory:", BASEDIR)

configfile: 'config.yaml'

# Get location of input data files (and desired output file location) from config
RAW_SEQS = config['input']  # path to fasta files of unaligned gene sequences
REF_PATH = config['reference-genomes']  # path to fasta file with reference gene sequence 
OUT_PATH = config['output']
# whatever clade you're interested in studying for CFEL and RELAX.
# Not sure yet if it will be a file list of sequence IDs to include or a REGEXP
CLADE_OF_INTEREST = config['clade-of-interest']

# Specify full paths to input and output data.
RAW_SEQS = os.path.join(BASEDIR, RAW_SEQS)
REF_PATH = os.path.join(BASEDIR, REF_PATH)
OUT_PATH = os.path.join(BASEDIR, OUT_PATH)

# Report to user
print("We are using the following input files")
print("Query FASTA file: ", RAW_SEQS)
print("Reference genome: ", REF_PATH)
print("Clade of interest: ", CLADE_OF_INTEREST)
print()


#==============================================================================
# End -- User defined settings
#==============================================================================

#ALL_SEROTYPES = glob_wildcards(REF_PATHS + "/{file}.gb").file
PARTITIONS = ['DENV1', 'DENV2', 'DENV3', 'DENV4']
ALL_RAW_DATASETS = ['DENV2'] # ['DENV4', 'DENV2', 'DENV3', 'DENV1']
ALL_REF_FASTAS = glob_wildcards(f"{REF_PATHS}/{{file}}.fasta").file   # ['envelope_protein_E', 'nonstructural_protein_NS2B', 'nonstructural_protein_NS2A', ...] 
#print(ALL_REF_FASTAS)

###########
## TOOLS ##
###########
hyphy = "/usr/local/bin/hyphy"
label_tree = '/data/shares/veg/dengue/hyphy-analyses/LabelTrees/trim-label-tree.bf'
cawlign = "/usr/local/bin/cawlign"
iqtree = "/opt/iqtree/iqtree-1.6.6-Linux/bin/iqtree"


# Collect all gene files dynamically
all_gene_files = expand(REF_PATHS+"/DENV2/{gene}.fasta",  
                        #gene=glob_wildcards(REF_PATHS+"/{serotype}/{gene}.fasta").gene)
                        gene=ALL_REF_FASTAS)


rule all:
    input:
        #expand(OUT_PATH + "/{serotype}/trees/{gene}-nodups.fasta.treefile", 
        #                serotype=ALL_RAW_DATASETS, 
        #                gene=ALL_REF_FASTAS)      
        # expand(OUT_PATH + "/concat/alignments/{gene}-clean.fasta",
        #                 gene=ALL_REF_FASTAS), 
        expand(os.path.join(OUT_PATH, 'concat', 'trees', "{gene}-nodups.{P}.nwk"), gene=ALL_REF_FASTAS, P=PARTITIONS )

rule map_to_ref:
    input: 
        ref_gene = os.path.join(REF_PATHS, "DENV2", "{MY_GENE}.fasta")   #DENV2 as the reference 
    output: os.path.join(OUT_PATH, "concat", "alignments", "{MY_GENE}.fasta")
    threads: 4
    shell:
        """
        mkdir -p {OUT_PATH}/concat/alignments
        {cawlign} -t codon -s BLOSUM62 -r {input.ref_gene} "{RAW_SEQS}/denv_concat.fasta" > {output}
        """

rule remove_ambig_seqs:
    input: os.path.join(OUT_PATH, "concat", "alignments", "{GENE}.fasta")
    output: os.path.join(OUT_PATH, "concat", "alignments", "{GENE}-clean.fasta")
    shell:
        """
        python3 filter-ambig-sequences.py -i {input}
        """
 
rule remove_dups:
    input: os.path.join(OUT_PATH, "concat", "alignments", "{GENE}-clean.fasta")
    output: os.path.join(OUT_PATH, "concat", "alignments", "{GENE}-nodups.fasta")
    shell:
        """
        {hyphy} cln Universal {input} "Yes/No" {output}
        """

rule build_tree:
    input: os.path.join(OUT_PATH, "concat", "alignments", "{GENE}-nodups.fasta")
    output: os.path.join(OUT_PATH, "concat", "trees", "{GENE}-nodups.fasta.treefile")
    shell:
        """
        mkdir -p {OUT_PATH}/concat/trees
        {iqtree} -s {input} -nt 8 -m GTR+I+G
        mv {OUT_PATH}/concat/alignments/{wildcards.GENE}-nodups.fasta.bionj {OUT_PATH}/concat/trees
        mv {OUT_PATH}/concat/alignments/{wildcards.GENE}-nodups.fasta.ckp.gz {OUT_PATH}/concat/trees
        mv {OUT_PATH}/concat/alignments/{wildcards.GENE}-nodups.fasta.log {OUT_PATH}/concat/trees
        mv {OUT_PATH}/concat/alignments/{wildcards.GENE}-nodups.fasta.mldist {OUT_PATH}/concat/trees
        mv {OUT_PATH}/concat/alignments/{wildcards.GENE}-nodups.fasta.treefile {OUT_PATH}/concat/trees #the final tree file is this one
        mv {OUT_PATH}/concat/alignments/{wildcards.GENE}-nodups.fasta.iqtree {OUT_PATH}/concat/trees
        """       

rule label_tree1:
    input: 
        in_tree = os.path.join(OUT_PATH, "concat", "trees", "{GENE}-nodups.fasta.treefile"),
    output:
        out_tree = os.path.join(OUT_PATH, "concat", "trees", "{GENE}-nodups.{P}.nwk")
    shell:
        "{hyphy} hyphy-analyses/LabelTrees/label-tree.bf --tree {input.in_tree}  --regexp '{wildcards.P}' --output {output.out_tree}"


rule relax:
    input:
        alignment=os.path.join(alignment_path,"{gene}-nodups.fasta"),
        tree="{results_dir}/trees/{gene}-nodups.DENV4.nwk"
    output:
        result="{results_dir}/RELAX/{gene}.RELAX.json",
    params:
        np=1
    shell:
        """
        mkdir -p {wildcards.results_dir}/RELAX
        
        {hyphy} RELAX \
        --alignment {input.alignment} \
        --tree {input.tree} \
        --output {output.result} \
        --mode "Group mode" \
        --reference-group 'DENV1'
        --srv Yes
        """

